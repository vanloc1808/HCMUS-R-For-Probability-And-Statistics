a <- 1 + 1
a
sixes <- function(n) {
points <- sample(1:6, n, replace = TRUE)
six <- points[points = 6]
if (length(six) = 0) {
return ("fALSE");
}
return ("TRUE");
}
ans <- sixes(5)
ans
sixes <- function(n) {
points <- sample(1:6, n, replace = TRUE)
six <- points[points == 6]
if (length(six) == 0) {
return ("fALSE");
}
return ("TRUE");
}
ans <- sixes(5)
ans
sixes <- function(n) {
points <- sample(1:6, n, replace = TRUE)
six <- points[points == 6]
if (length(six) == 0) {
return ("fALSE");
}
return ("TRUE");
}
ans <- sixes(5)
ans
play <- function(n, N) {
ok <- 0;
for (i in 1:N) {
if (sixes(n) == "TRUE") {
ok = ok + 1;
}
}
return (ok / N)
}
p <- play(5, 20)
p
data <- read.csv("giamcan.csv", header = TRUE)
data
attach(data)
setwd("F:/GithubRepository/R-Practice/C2_BasicProgrammingInR")
data <- read.csv("giamcan.csv", header = TRUE)
data
attach(data)
data <- read.csv("giamcan.csv", header = TRUE)
data
attach(data)
names(data)
data <- read.csv("giamcan.csv", header = TRUE)
data
attach(data)
names(data)
below65before <- length(Truoc[Truoc < 65])
below65before
data <- read.csv("giamcan.csv", header = TRUE)
data
attach(data)
names(data)
n <- length(Nguoi)
below65before <- length(Truoc[Truoc < 65])
below65before
below65before / n
below65after <- length(Sau[Say < 65])
below65after
below65after / n
data <- read.csv("giamcan.csv", header = TRUE)
data
attach(data)
names(data)
n <- length(Nguoi)
below65before <- length(Truoc[Truoc < 65])
below65before
below65before / n
below65after <- length(Sau[Sau < 65])
below65after
below65after / n
data <- read.csv("giamcan.csv", header = TRUE)
data
attach(data)
names(data)
n <- length(Nguoi)
n
below65before <- length(Truoc[Truoc < 65])
below65before
below65before / n
below65after <- length(Sau[Sau < 65])
below65after
below65after / n
data <- read.csv("giamcan.csv", header = TRUE)
data
attach(data)
names(data)
n <- length(Nguoi)
n
below65before <- length(Truoc[Truoc < 65])
below65before
below65before / n
below65after <- length(Sau[Sau < 65])
below65after
below65after / n
between6575before <- length(Truoc[Truoc >= 65 & Truoc <= 75])
between6575before
between6575before / n
between6575after <- length(Sau[Sau >= 65 & Sau <= 75])
between6575after
between6575after / n
points <- sample(1:10, 40, replace = TRUE) #create an array of 40 elements of integer from 1 to 10
points
cntMean <- function(x) {
n = length(x)
sum <- 0
for (i in 1:n) {
sum = sum + x[i]
}
return (sum/n);
}
m <- cntMean(points)
m
#mean(points)
cntVar <- function(x, m) {
n = length(x)
sum <- 0
for (i in 1:n) {
sum = sum + (x[i] - m)^2
}
return (sum/(n - 1));
}
v <- cntVar(points, m)
v
#var(points)
points <- sample(1:10, 40, replace = TRUE) #create an array of 40 elements of integer from 1 to 10
points
cntMean <- function(x) {
n = length(x)
sum <- 0
for (i in 1:n) {
sum = sum + x[i]
}
return round((sum / n), digits = 2)
}
m <- cntMean(points)
m
#mean(points)
cntVar <- function(x, m) {
n = length(x)
sum <- 0
for (i in 1:n) {
sum = sum + (x[i] - m)^2
}
return (sum/(n - 1));
}
v <- cntVar(points, m)
v
#var(points)
points <- sample(1:10, 40, replace = TRUE) #create an array of 40 elements of integer from 1 to 10
points
cntMean <- function(x) {
n = length(x)
sum <- 0
for (i in 1:n) {
sum = sum + x[i]
}
return round((sum / n), digits = 2)
}
m <- cntMean(points)
m
#mean(points)
cntVar <- function(x, m) {
n = length(x)
sum <- 0
for (i in 1:n) {
sum = sum + (x[i] - m)^2
}
return (sum/(n - 1));
}
v <- cntVar(points, m)
v
#var(points)
points <- sample(1:10, 40, replace = TRUE) #create an array of 40 elements of integer from 1 to 10
points
cntMean <- function(x) {
n = length(x)
sum <- 0
for (i in 1:n) {
sum = sum + x[i]
}
return (round((sum / n), digits = 2))
}
m <- cntMean(points)
m
#mean(points)
cntVar <- function(x, m) {
n = length(x)
sum <- 0
for (i in 1:n) {
sum = sum + (x[i] - m)^2
}
return (sum/(n - 1));
}
v <- cntVar(points, m)
v
#var(points)
points <- sample(1:10, 40, replace = TRUE) #create an array of 40 elements of integer from 1 to 10
points
cntMean <- function(x) {
n = length(x)
sum <- 0
for (i in 1:n) {
sum = sum + x[i]
}
return (round((sum / n), digits = 2))
}
m <- cntMean(points)
m
#mean(points)
cntVar <- function(x, m) {
n = length(x)
sum <- 0
for (i in 1:n) {
sum = sum + (x[i] - m)^2
}
return (round((sum/(n - 1)), digits = 2))
}
v <- cntVar(points, m)
v
#var(points)
points <- sample(1:10, 40, replace = TRUE) #create an array of 40 elements of integer from 1 to 10
points
cntMean <- function(x) {
n = length(x)
sum <- 0
for (i in 1:n) {
sum = sum + x[i]
}
return (round((sum / n), digits = 2))
}
m <- cntMean(points)
m
mean(points)
cntVar <- function(x, m) {
n = length(x)
sum <- 0
for (i in 1:n) {
sum = sum + (x[i] - m)^2
}
return (round((sum/(n - 1)), digits = 2))
}
v <- cntVar(points, m)
v
var(points)
